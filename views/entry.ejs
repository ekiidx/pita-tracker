<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pita Tracker</title>

    <link href="/assets/css/tailwind.css" rel="stylesheet">
    <link href="/assets/css/main.css" rel="stylesheet" />
</head>

<body>
    <div class="w-full">
        <header class="sticky top-0 z-50 w-full border-b border-sidebar-border bg-[#ffffff]">
            <div class="flex h-14 justify-between items-center px-4">
                <div class="logo">
                    <a href="/"><img class="cat-logo" src="/assets/img/cat-run.gif"></a>
                    <h1>Pita Tracker 1.0</h1>
                </div>

                <div>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" onclick="openBloodModal()">+ Blood</button>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" onclick="openInsulinModal()">+ Insulin</button>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" onclick="openFoodModal()">+ Food</button>
                </div>
            </div>
        </header>

        <!-- Blood Modal -->
        <div id="bloodModal" class="modal">
            <div class="modal-content">
                <form action="/blood" method="POST">
                    <label for="date">Date</label>
                    <input type="date" id="date" name="date" required>
                    <label for="time">Time of Measurement</label>
                    <input type="time" id="time" name="time" required>
                    <label for="blood">Blood Glucose (mg/dL)</label>
                    <input type="number" id="blood" name="blood" min="0" required>
                    <label for="temp">Temperature (F)</label>
                    <input type="number" id="temp" name="temp" min="0" required>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="submit">Submit</button>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="button" onclick="closeModal()">Cancel</button>
                </form>
            </div>
        </div>
        <!-- Blood Modal Edit-->
        <div id="bloodModalEdit" class="modal">
            <div class="modal-content">
                <form id="blood-edit" action="" method="POST">
                    <input type="hidden" name="id" id="bloodEditId" value="">
                    <label for="date">Date</label>
                    <input type="date" id="bloodEditDate" name="date" required>
                    <label for="time">Time of Measurement</label>
                    <input type="time" id="bloodEditTime" name="time" required>
                    <label for="blood">Blood Glucose (mg/dL)</label>
                    <input type="number" id="bloodEditBlood" name="blood" min="0" required>
                    <label for="temp">Temperature (F)</label>
                    <input type="number" id="bloodEditTemp" name="temp" min="0" required>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="submit">Submit</button>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="button" onclick="closeModal()">Cancel</button>
                    <button class="btn-delete inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="button" onclick="deleteBlood()">Delete</button>
                </form>
            </div>
        </div>
        <!-- Insulin Modal -->
        <div id="insulinModal" class="modal">
            <div class="modal-content">
                <form action="/insulin" method="POST">
                    <label for="date">Date</label>
                    <input type="date" id="date" name="date" required>
                    <label for="time">Time of Measurement</label>
                    <input type="time" id="time" name="time" required>
                    <label for="insulin">Insulin Dose (u)</label>
                    <input type="number" step="0.1" id="insulin" name="insulin">
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="submit">Submit</button>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="button" onclick="closeModal()">Cancel</button>
                </form>
            </div>
        </div>
        <!-- Insulin Edit Modal -->
        <div id="insulinModalEdit" class="modal">
            <div class="modal-content">
                <form id="insulin-edit" action="" method="POST">
                    <input type="hidden" name="id" id="insulinEditId" value="">
                    <label for="date">Date</label>
                    <input type="date" id="insulinEditDate" name="date" required>
                    <label for="time">Time of Measurement</label>
                    <input type="time" id="insulinEditTime" name="time" required>
                    <label for="insulin">Insulin Dose (u)</label>
                    <input type="number" step="0.1" id="insulinEditInsulin" name="insulin">
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="submit">Submit</button>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="button" onclick="closeModal()">Cancel</button>
                    <button class="btn-delete inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="button" onclick="deleteInsulin()">Delete</button>
                </form>
            </div>
        </div>
        <!-- Food Modal -->
        <div id="foodModal" class="modal">
            <div class="modal-content">
                <form action="/food" method="POST">
                    <label for="date">Date</label>
                    <input type="date" id="date" name="date" required>
                    <label for="time">Time of Measurement</label>
                    <input type="time" id="time" name="time" required>
                    <label for="food">Food Amount (cups)</label>
                    <input type="number" id="food" name="food" min="0" step=".1" required>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="submit">Submit</button>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="button" onclick="closeModal()">Cancel</button>
                </form>
            </div>
        </div>
        <!-- Food Edit Modal -->
        <div id="foodModalEdit" class="modal">
            <div class="modal-content">
                <form id="food-edit" action="" method="POST">
                    <input type="hidden" name="id" id="foodEditId" value="">
                    <label for="date">Date</label>
                    <input type="date" id="foodEditDate" name="date" required>
                    <label for="time">Time of Measurement</label>
                    <input type="time" id="foodEditTime" name="time" required>
                    <label for="food">Food Amount (cups)</label>
                    <input type="number" id="foodEditFood" name="food" min="0" step="0.1" required>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="submit">Submit</button>
                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="button" onclick="closeModal()">Cancel</button>
                    <button class="btn-delete inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2" type="button" onclick="deleteFood()">Delete</button>
                </form>
            </div>
        </div>

        <main class="min-h-[calc(100svh-6.82rem)] bg-[#f0f0f0]">
            <section class="grid grid-cols-1 lg:grid-cols-3 gap-4 p-4 ">

                <article class="lg:col-span-1">
                    <div class="rounded-lg bg-[#ffffff]">
                        <div class="flex p-6 flex-row justify-between items-center gap-x-1.5 space-y-0">
                            <h2 class="font-semibold leading-none tracking-tight">Entries</h2>
                            <!-- <div>
                                <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input hover:bg-accent hover:text-accent-foreground h-9 w-9 cursor-pointer shrink-0" aria-label="View" type="button" aria-haspopup="menu" aria-expanded="false">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eye h-4 w-4">
                                    <path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"></path>
                                    <circle cx="12" cy="12" r="3"></circle>
                                    </svg>
                                </button>
                            </div> -->
                        </div>

                        <div class="p-0">
                            <div dir="ltr" class="relative overflow-hidden w-[calc(100vw-2rem)] md:w-auto --radix-scroll-area-corner-width: 0px; --radix-scroll-area-corner-height: 0px;">
                                <div class="h-full w-full rounded-[inherit]" style="overflow: scroll hidden;">
                                    <div class="relative w-full overflow-auto">

                                        <table class="w-full caption-bottom text-sm overflow-hidden">
                                            <thead class="border-b">
                                                <tr class="border-b">
                                                    <th class="h-10 px-2 text-start align-middle font-medium">
                                                        <div class="flex items-center gap-x-2 ms-4">
                                                            <button class="inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground rounded-md px-3 text-xs cursor-pointer -ms-3 h-8" type="button" aria-haspopup="menu" aria-expanded="false">
                                                                <span>Type</span>
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-down-up ms-2 size-3">
                                                                    <path d="m3 16 4 4 4-4"></path>
                                                                    <path d="M7 20V4"></path>
                                                                    <path d="m21 8-4-4-4 4"></path>
                                                                    <path d="M17 4v16"></path>
                                                                </svg>
                                                            </button>
                                                        </div>
                                                    </th>
                                                    <th class="h-10 px-2 text-start align-middle font-medium">
                                                        <div class="flex items-center gap-x-2">
                                                            <button class="inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground rounded-md px-3 text-xs cursor-pointer -ms-3 h-8" type="button" aria-haspopup="menu" aria-expanded="false">
                                                                <span>Date</span>
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-down-up ms-2 size-3">
                                                                    <path d="m3 16 4 4 4-4"></path>
                                                                    <path d="M7 20V4"></path>
                                                                    <path d="m21 8-4-4-4 4"></path>
                                                                    <path d="M17 4v16"></path>
                                                                </svg>
                                                            </button>
                                                        </div>
                                                    </th>
                                                    <th class="h-10 px-2 text-start align-middle font-medium">
                                                        <div class="flex items-center gap-x-2">
                                                            <button class="inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground rounded-md px-3 text-xs cursor-pointer -ms-3 h-8 data-[state=open]:bg-accent" type="button" aria-haspopup="menu" aria-expanded="false">
                                                                <span>Time</span>
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-down-up ms-2 size-3">
                                                                    <path d="m3 16 4 4 4-4"></path>
                                                                    <path d="M7 20V4"></path>
                                                                    <path d="m21 8-4-4-4 4"></path>
                                                                    <path d="M17 4v16"></path>
                                                                </svg>
                                                            </button>
                                                        </div>
                                                    </th>
                                                    <th class="h-10 px-2 text-start align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pe-0 [&amp;&gt;[role=checkbox]]:translate-y-[2px]">
                                                        <div class="flex items-center gap-x-2">
                                                            <button class="inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground rounded-md px-3 text-xs cursor-pointer -ms-3 h-8 data-[state=open]:bg-accent" type="button" aria-haspopup="menu" aria-expanded="false">
                                                                <span>Amount</span>
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-down-up ms-2 size-3">
                                                                    <path d="m3 16 4 4 4-4"></path>
                                                                    <path d="M7 20V4"></path>
                                                                    <path d="m21 8-4-4-4 4"></path>
                                                                    <path d="M17 4v16"></path>
                                                                </svg>
                                                            </button>
                                                        </div>
                                                    </th>
                                                    <th data-slot="table-head" class="h-10 px-2 text-start align-middle font-medium">
                                                        <div class="flex items-center gap-x-2">
                                                            <!-- <button class="inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground rounded-md px-3 text-xs cursor-pointer -ms-3 h-8 data-[state=open]:bg-accent" type="button" aria-haspopup="menu" aria-expanded="false">
                                                                <span></span>
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-down-up ms-2 size-3">
                                                                    <path d="m3 16 4 4 4-4"></path>
                                                                    <path d="M7 20V4"></path>
                                                                    <path d="m21 8-4-4-4 4"></path>
                                                                    <path d="M17 4v16"></path>
                                                                </svg>
                                                            </button> -->
                                                        </div>
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody id="data-body">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </article>

                <article class="lg:col-span-2">
                    <div class="rounded-lg bg-[#ffffff]">
                        <div class="flex p-6 flex-row justify-between items-center gap-x-1.5 space-y-0">
                            <h2 class="font-semibold leading-none tracking-tight">Blood Chart</h2>
                            <!-- <div>
                                <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 w-9 cursor-pointer shrink-0" aria-label="View" type="button" aria-haspopup="menu" aria-expanded="false">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eye h-4 w-4">
                                        <path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"></path>
                                        <circle cx="12" cy="12" r="3"></circle>
                                    </svg>
                                </button>
                            </div> -->
                         </div>

                        <div class="p-0">
                            <div dir="ltr" class="relative overflow-hidden w-[calc(100vw-2rem)] md:w-auto" style="position: relative; --radix-scroll-area-corner-width: 0px; --radix-scroll-area-corner-height: 0px;">
                                <div class="h-full w-full rounded-[inherit]" style="overflow: scroll hidden;">

                                    <div class="graph-content">
                                        <canvas id="bloodChartToday"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>       
                </article>
            </section>
        </main>
        <footer class="bg-[#ffffff] border-t border-sidebar-border">
            <div class="flex justify-between items-center p-4 md:px-6">
                <p class="text-xs text-muted-foreground md:text-sm">© 2025 <a href="https://github.com/ekiidx/pita-tracker" target="_blank" rel="noopener noreferrer" class="items-center justify-center whitespace-nowrap rounded-md text-sm font-medium cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 text-primary underline-offset-4 hover:underline h-9 inline p-0">Pita Tracker 1.0</a></p>
                <p class="text-xs text-muted-foreground md:text-sm"><a href="https://vuedesign.co" target="_blank" rel="noopener noreferrer" class="items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors cursor-pointer focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 text-primary underline-offset-4 hover:underline h-9 inline p-0">Vue Design</a></p>
            </div>
        </footer>
    </div>

    <script>
        const yyyyMmDd = "<%= date %>";
        var myChart;

        window.onload = function() {
            fetch('/api/entries/' + yyyyMmDd)
            .then(res => res.json())
            .then(data => {
                const tbody = document.getElementById('data-body');

                data.forEach(row => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td style="padding-left: 1.5rem;">${row.source}</td>
                        <td>${row.date}</td>
                        <td style="min-width: 6rem;">${row.time}</td>
                        <td>${row.blood}</td>
                        <td style="padding-right: 1.5rem; padding-top: .5rem; padding-bottom: .5rem;">
                            <span class="btn-edit" onclick="editModal('${row.id}', '${row.source}')"><?xml version="1.0"?><svg style="height: .875rem;" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><title/><path d="M16,10a3,3,0,1,0-3-3A3,3,0,0,0,16,10Z"/><path d="M16,19a3,3,0,1,0-3-3A3,3,0,0,0,16,19Z"/><path d="M16,28a3,3,0,1,0-3-3A3,3,0,0,0,16,28Z"/></svg></span></td>
                    `;
                    tbody.appendChild(tr);
                });
            })
            .catch(err => {
                console.error('Error fetching data:', err);
            });

            async function fetchChartData() {
                const res_blood = await fetch('/api/blood/date/' + yyyyMmDd);
                const res_insulin = await fetch('/api/insulin/date/' + yyyyMmDd);
                const res_food = await fetch('/api/food/date/' + yyyyMmDd);
                
                const bloodData = await res_blood.json();
                const insulinData = await res_insulin.json();
                const foodData = await res_food.json();

                bloodData.sort((a, b) => {
                    const a_date = new Date(`2025-06-30T${a.time}:00`);
                    const b_date = new Date(`2025-06-30T${b.time}:00`);
                    return a_date - b_date;
                });

                // Convert backend time strings "HH:mm" to Date objects for chart.js
                // Use today's date + time (date is irrelevant since we only display time axis)
                const bloodDataPoints = bloodData.map(({
                    time,
                    blood
                }) => {
                    const [hour, minute] = time.split(':').map(Number);
                    const date = new Date(2025, 5, 20, hour, minute); // months are 0-indexed in JS
                    return {
                        x: date,
                        y: blood
                    };
                });
                const insulinDataPoints = insulinData.map(({
                    time,
                    insulin
                }) => {
                    const [hour, minute] = time.split(':').map(Number);
                    const date = new Date(2025, 5, 20, hour, minute); // months are 0-indexed in JS
                    return {
                        x: date,
                        y: insulin
                    };
                });
                const foodDataPoints = foodData.map(({
                    time,
                    food
                }) => {
                    const [hour, minute] = time.split(':').map(Number);
                    const date = new Date(2025, 5, 20, hour, minute); // months are 0-indexed in JS
                    return {
                        x: date,
                        y: food
                    };
                });

                const ctxChartToday = document.getElementById('bloodChartToday').getContext('2d');
                myChart = new Chart(ctxChartToday, {
                    type: 'line',
                    data: {
                        datasets: [{
                            label: 'Blood Glucose',
                            data: bloodDataPoints,
                            borderColor: 'rgba(255, 99, 132, 1)',
                            backgroundColor: 'rgba(255, 225, 225, 0)',
                            fill: true,
                            tension: 0.4,
                            parsing: false // because we're using {x, y} objects directly
                        },
                        {
                            type: 'bar',
                            label: 'Insulin',
                            data: insulinDataPoints,
                            borderColor: 'rgba(154, 162, 235, 1)',
                            backgroundColor: 'rgba(154, 162, 235, 0.6)',
                            fill: true,
                            yAxisID: 'y1',
                        },
                        {
                            type: 'bar',
                            label: 'Food',
                            data: foodDataPoints,
                            borderColor: 'rgba(34, 139, 34, 1)',
                            backgroundColor: 'rgba(34, 139, 34, 0.6)',
                            fill: true,
                            yAxisID: 'y1',
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        interaction: {
                            mode: 'index',
                            intersect: false,
                        },
                        stacked: false,
                        scales: {
                            x: {
                                type: 'time',
                                time: {
                                    unit: 'hour',
                                    displayFormats: {
                                        hour: 'h:mm'
                                    },
                                    tooltipFormat: 'h:mm'
                                },
                                title: {
                                    display: true,
                                    text: 'Time'
                                },
                                min: new Date(2025, 5, 20, 0, 0),
                                max: new Date(2025, 5, 20, 23, 59)
                            },
                            y: {
                                type: 'linear',
                                position: 'left',
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Blood Sugar (mg/dL)'
                                }
                            },
                            y1: {
                                type: 'linear',
                                position: 'right',
                                title: {
                                    display: true,
                                    text: 'Food (cups) / Insulin (u)'
                                },
                                grid: {
                                    drawOnChartArea: false
                                }
                            }
                        },
                        barThickness: 10 
                    }
                });
            }
            fetchChartData();
        }

        // Resize chart on window resize
        window.addEventListener('resize', () => {
            myChart.resize();
        });

        function openBloodModal() {
            document.getElementById("bloodModal").style.display = "block";
        }
        function closeModal() {
            document.getElementById("bloodModal").style.display = "none";
            document.getElementById("bloodModalEdit").style.display = "none";
            document.getElementById("insulinModal").style.display = "none";
            document.getElementById("insulinModalEdit").style.display = "none";
            document.getElementById("foodModal").style.display = "none";
            document.getElementById("foodModalEdit").style.display = "none";
        }
        function editModal(id, source) {
            if (source === "🩸") {
                editBloodModal(id);
            } else if (source === "💊") {
                editInsulinModal(id);
            } else if (source === "🍗") {
                editFoodModal(id);
            } else {
                console.warn("Unknown source type:", source);
            }
        }
        function editBloodModal(id) {
            document.getElementById("bloodModalEdit").style.display = "block";
            const form = document.getElementById("blood-edit");
            const idInput = document.getElementById("bloodEditId");
            form.action = '/blood/edit/' + id;
            idInput.value = id;

            const edit_date = document.getElementById("bloodEditDate");
            const edit_time = document.getElementById("bloodEditTime");
            const edit_blood = document.getElementById("bloodEditBlood");
            const edit_temp = document.getElementById("bloodEditTemp");

            fetch('/api/blood/' + id)
            .then(res => res.json())
            .then(data => {
                data.forEach(row => {
                    edit_date.value = row.date;
                    edit_time.value = row.time;
                    edit_blood.value = row.blood;
                    edit_temp.value = row.temp;

                    edit_date.placeholder = row.date;
                    edit_time.placeholder = row.time;
                    edit_blood.placeholder = row.blood;
                    edit_temp.placeholder = row.temp;
            })})
            .catch(err => {
                console.error('Error fetching data:', err);
            });
        }
        function deleteBlood() {
            const idInput = document.getElementById("bloodEditId");
            const idValue = idInput.value;
            if (!confirm("Are you sure you want to delete this entry?")) {
                return;
            }
            fetch('/blood/delete/' + idValue, {
                method: 'POST'
            })
            .then(res => {
                if (res.ok) {
                    window.location.reload();
                } else {
                    return res.text().then(msg => { throw new Error(msg); });
                }
            })
            .catch(err => {
                console.error('Error deleting entry:', err);
                alert('Failed to delete entry.');
            });
        }

        function openInsulinModal() {
            document.getElementById("insulinModal").style.display = "block";
        }
        function editInsulinModal(id) {
            document.getElementById("insulinModalEdit").style.display = "block";
            const form = document.getElementById("insulin-edit");
            const idInput = document.getElementById("insulinEditId");
            let currentAction = form.action;
            form.action = '/insulin/edit/' + id;
            idInput.value = id;

            const edit_date = document.getElementById("insulinEditDate");
            const edit_time = document.getElementById("insulinEditTime");
            const edit_insulin = document.getElementById("insulinEditInsulin");

            fetch('/api/insulin/' + id)
            .then(res => res.json())
            .then(data => {
                data.forEach(row => {
                    edit_date.value = row.date;
                    edit_time.value = row.time;
                    edit_insulin.value = row.insulin;

                    edit_date.placeholder = row.date;
                    edit_time.placeholder = row.time;
                    edit_insulin.placeholder = row.insulin;
            })})
            .catch(err => {
                console.error('Error fetching data:', err);
            });
        }
        function deleteInsulin() {
            const idInput = document.getElementById("insulinEditId");
            const idValue = idInput.value;
            if (!confirm("Are you sure you want to delete this entry?")) {
                return;
            } 
            fetch('/insulin/delete/' + idValue, {
                method: 'POST'
            })
            .then(res => {
                if (res.ok) {
                    window.location.reload();
                } else {
                    return res.text().then(msg => { throw new Error(msg); });
                }
            })
            .catch(err => {
                console.error('Error deleting entry:', err);
                alert('Failed to delete entry.');
            });
        }

        function openFoodModal() {
            document.getElementById("foodModal").style.display = "block";
        }
        function editFoodModal(id) {
            document.getElementById("foodModalEdit").style.display = "block";
            const form = document.getElementById("food-edit");
            const idInput = document.getElementById("foodEditId");
            form.action = '/food/edit/' + id;
            idInput.value = id;

            const edit_date = document.getElementById("foodEditDate");
            const edit_time = document.getElementById("foodEditTime");
            const edit_food = document.getElementById("foodEditFood");

            fetch('/api/food/' + id)
            .then(res => res.json())
            .then(data => {
                data.forEach(row => {
                    edit_date.value = row.date;
                    edit_time.value = row.time;
                    edit_food.value = row.food;

                    edit_date.placeholder = row.date;
                    edit_time.placeholder = row.time;
                    edit_food.placeholder = row.food;
            })})
            .catch(err => {
                console.error('Error fetching data:', err);
            });
        }
        function deleteFood() {
            const idInput = document.getElementById("foodEditId");
            const idValue = idInput.value;
            if (!confirm("Are you sure you want to delete this entry?")) {
                return;
            }
            fetch('/food/delete/' + idValue, {
                method: 'POST'
            })
            .then(res => {
                if (res.ok) {
                    window.location.reload();
                } else {
                    return res.text().then(msg => { throw new Error(msg); });
                }
            })
            .catch(err => {
                console.error('Error deleting entry:', err);
                alert('Failed to delete entry.');
            });
        }
    </script>
    <script src="/assets/js/chartjs.min.js"></script>
    <script src="/assets/js/chartjs-adapter-date-fns.min.js"></script>
</body>
</html>